name: order

x-app-setup: &app-setup
  build: &app-build
    args:
      GROUP_ID: "${DOCKER_ORDER_IMAGE_GROUP_ID}"
      USER_ID: "${DOCKER_ORDER_IMAGE_USER_ID}"
      INSTALL_LOCAL_SHARED_KERNEL: "${DOCKER_INSTALL_LOCAL_SHARED_KERNEL}"
    dockerfile: Dockerfile
    context: .
    additional_contexts:
      - order-app=../app
      - shared-kernel=../../dw_shared_kernel
  environment: &app-env
    APPLICATION_TITLE: ${APPLICATION_TITLE}
    APPLICATION_DEBUG: ${APPLICATION_DEBUG}
    APPLICATION_VERSION: ${APPLICATION_VERSION}

    DATABASE_USERNAME: ${DATABASE_USERNAME}
    DATABASE_PASSWORD: ${DATABASE_PASSWORD}
    DATABASE_HOST: ${DATABASE_HOST}
    DATABASE_PORT: ${DATABASE_PORT}
    DATABASE_DATABASE: ${DATABASE_DATABASE}

    RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
    RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
    RABBITMQ_HOST: ${RABBITMQ_HOST}
    RABBITMQ_PORT: ${RABBITMQ_PORT}
    RABBITMQ_CATALOG_RESERVATION_QUEUE: ${RABBITMQ_CATALOG_RESERVATION_QUEUE}

    SMTP_HOST: ${SMTP_HOST}
    SMTP_PORT: ${SMTP_PORT}
    SMTP_TIMEOUT: ${SMTP_TIMEOUT}
    SMTP_USE_TLS: ${SMTP_USE_TLS}
    SMTP_SENDER_EMAIL: ${SMTP_SENDER_EMAIL}

    IAC_HOST: ${IAC_HOST}
    IAC_PORT: ${IAC_PORT}
    IAC_API_KEY: ${IAC_API_KEY}

    CATALOG_SERVICE_HOST: ${CATALOG_SERVICE_HOST}
    CATALOG_SERVICE_PORT: ${CATALOG_SERVICE_PORT}
    CATALOG_SERVICE_API_KEY: ${CATALOG_SERVICE_API_KEY}
  volumes:
    - ../app/src:/app

services:

  order-backend-app:
    <<: *app-setup
    image: startupcorp/order-backend-app
    container_name: order-backend-app
    build:
      <<: *app-build
      target: backend-app
    environment:
      <<: *app-env
      JWT_PUBLIC_KEY: ${JWT_PUBLIC_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM}
    ports:
      - '${DOCKER_ORDER_APPLICATION_EXPOSE_PORT}:${ORDER_APPLICATION_PORT}'
    entrypoint: [
      "uvicorn", "interface.web.app:web_app",
      "--host", "0.0.0.0",
      "--port", "${ORDER_APPLICATION_PORT}",
      "--factory",
      "--reload",
      "--reload-dir", ".",
    ]
    depends_on:
      order-migration-service:
        condition: service_completed_successfully

  order-queue-consumer:
    <<: *app-setup
    image: startupcorp/order-queue-consumer
    container_name: order-queue-consumer
    build:
      <<: *app-build
      target: queue-consumer
    entrypoint: [
      "faststream", "run",
      "--factory",
      "interface.queue.app:queue_app",
    ]
    environment:
      <<: *app-env
      RABBITMQ_ORDER_QUEUE: ${RABBITMQ_ORDER_QUEUE}
    depends_on:
      order-migration-service:
        condition: service_completed_successfully

  order-migration-service:
    <<: *app-setup
    image: startupcorp/order-migration-service
    container_name: order-migration-service
    build:
      <<: *app-build
      target: migration-service
    command: "migration-run"
    volumes:
      - ../app/src/infrastructure/database/relational/migrations/:/app/migrations

  smtp-server:
    image: axllent/mailpit
    container_name: order-smtp-server
    ports:
      - "${DOCKER_SMTP_SERVER_EXPOSE_PORT}:8025"

networks:
  default:
    name: deye-web-network
    external: true
