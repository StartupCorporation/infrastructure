## ======================================
## ==== INFRASTRUCTURE CONFIGURATION ====
## ======================================

## ==== DOCKER
export DOCKER_DB_EXPOSE_PORT=6543
export DOCKER_RABBITMQ_EXPOSE_PORT=15672
export DOCKER_RABBITMQ_EXPOSE_PORT_AMQP=5672
export DOCKER_MINIO_EXPOSE_PORT_UI=10000
export DOCKER_MINIO_EXPOSE_PORT_CONSOLE=9001
export DOCKER_NGINX_EXPOSE_PORT=9999

## ==== RABBITMQ
export RABBITMQ_USERNAME=dev
export RABBITMQ_PASSWORD=devdev

## ==== RESOURCES SETUP RABBITMQ
export SETUP_RABBITMQ_HOST=rabbitmq
export SETUP_RABBITMQ_PORT=15672
export SETUP_RABBITMQ_USERNAME=dev
export SETUP_RABBITMQ_PASSWORD=devdev

export SETUP_RABBITMQ_EXCHANGE_NAME=deye_web.direct

export SETUP_RABBITMQ_COMMENT_PRODUCT_QUEUE=comment.product
export SETUP_RABBITMQ_DEAD_LETTER_COMMENT_PRODUCT_QUEUE=comment.product.dlq
export SETUP_RABBITMQ_CATALOG_RESERVATION_QUEUE=catalog.reservation
export SETUP_RABBITMQ_DEAD_LETTER_CATALOG_RESERVATION_QUEUE=catalog.reservation.dlq

export SETUP_RABBITMQ_ORDER_RESERVATION_QUEUE=order.queue
export SETUP_RABBITMQ_DEAD_LETTER_ORDER_RESERVATION_QUEUE=order.queue.dlq

## ==== RESOURCES SETUP DATABASE
export SETUP_DB_HOST=database
export SETUP_DB_PORT=5432
export SETUP_DB_USERNAME=dev
export SETUP_DB_PASSWORD=devdev

export SETUP_DB_CATALOG_DATABASE=catalog
export SETUP_DB_CATALOG_USERNAME=catalog_user
export SETUP_DB_CATALOG_PASSWORD=catalog_password

export SETUP_DB_COMMENT_DATABASE=comment
export SETUP_DB_COMMENT_USERNAME=comment_user
export SETUP_DB_COMMENT_PASSWORD=comment_password

export SETUP_DB_IDENTITY_AND_ACCESS_DATABASE=identity_and_access
export SETUP_DB_IDENTITY_AND_ACCESS_USERNAME=identity_and_access_user
export SETUP_DB_IDENTITY_AND_ACCESS_PASSWORD=identity_and_access_password

export SETUP_DB_ORDER_DATABASE=order_
export SETUP_DB_ORDER_USERNAME=order_user
export SETUP_DB_ORDER_PASSWORD=order_password

## ==== DATABASE
export POSTGRES_USERNAME=dev
export POSTGRES_PASSWORD=devdev

## ==== MINIO
export MINIO_ACCESS_KEY=Q3AM3UQ867SPQQA43P2F
export MINIO_SECRET_KEY=tfteSlswRu7BJ86wekitnifILbZam1KYY3TG
export MINIO_URL=http://minio:9000
export MINIO_BUCKET_NAME=deye-admin-files

## ===================================
## =======      FUNCTIONS      =======
## ===================================
export _FUNCTIONS_LOCATION=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

# Starts deye-web project. It means that all components (microservices, frontend applications, infra) are started
deye-up() (
    cd "$_FUNCTIONS_LOCATION"

    infra-up

    (cd ../backend/comment/infrastructure && source .env.local && app-up)
    (cd ../backend/catalog/infrastructure && source .env.local && app-up)
    (cd ../backend/order/infrastructure && source .env.local && app-up)
    (cd ../backend/identity-and-access/infrastructure && source .env.local && app-up)
    (cd ../frontend/customer/infrastructure && source .env.local && app-up)
)

# Stops deye-web project
deye-down() (
    cd "$_FUNCTIONS_LOCATION"

    (cd ../backend/comment/infrastructure && source .env.local && app-down)
    (cd ../backend/catalog/infrastructure && source .env.local && app-down)
    (cd ../backend/order/infrastructure && source .env.local && app-down)
    (cd ../backend/identity-and-access/infrastructure && source .env.local && app-down)
    (cd ../frontend/customer/infrastructure && source .env.local && app-down)

    infra-down
)

# Starts only the infrastructure part of the deye-web project: database, message broker, etc.
infra-up() (
    cd "$_FUNCTIONS_LOCATION"

    docker network ls | grep deye-web-network > /dev/null || docker network create --driver bridge deye-web-network
    docker compose up -d
    docker compose wait resources-setup &> /dev/null
    docker compose rm -fv > /dev/null
)

# Stops deye-web infrastructure part
infra-down() (
    cd "$_FUNCTIONS_LOCATION"

    docker compose down
)
